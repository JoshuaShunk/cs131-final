{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\n\n// Create a context for sharing model loading state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModelContext = /*#__PURE__*/createContext({\n  model: null,\n  isLoading: true,\n  error: null\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({\n  children,\n  customModelUrl = null\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n\n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = loadedModel => {\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n\n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n\n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n\n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && child.children && child.children.length > 0) {\n        return true;\n      }\n      return false;\n    });\n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n\n  // Load the model once when the provider mounts or when customModelUrl changes\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    setIsLoading(true);\n    setError(null);\n\n    // Determine which model to load\n    const modelPath = customModelUrl || getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    const loadModel = async () => {\n      _s();\n      try {\n        // If we have a custom model URL, just load it directly\n        if (customModelUrl) {\n          console.log('[ModelContext] Loading custom model from URL:', customModelUrl);\n\n          // Preload the model\n          useGLTF.preload(customModelUrl);\n          console.log('[ModelContext] Custom model preloaded successfully');\n\n          // Load the model\n          const loadedModel = useGLTF(customModelUrl);\n          console.log('[ModelContext] Custom model loaded successfully:', loadedModel);\n\n          // Check if the model has a scene and is valid\n          if (loadedModel.scene) {\n            console.log('[ModelContext] Custom model has a valid scene:', loadedModel.scene);\n            console.log('[ModelContext] Scene children:', loadedModel.scene.children.length);\n\n            // Log information about each child in the scene\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n\n            // Validate the model\n            const isValid = isValidModel(loadedModel);\n            if (!isValid) {\n              console.warn('[ModelContext] Custom model is not valid for rendering, will use fallback');\n              setError(new Error('Custom model is not valid for rendering'));\n            }\n          } else {\n            console.warn('[ModelContext] Custom model loaded but has no scene');\n            setError(new Error('Custom model has no scene'));\n          }\n          setModel(loadedModel);\n          setIsLoading(false);\n          return;\n        }\n\n        // Otherwise, fetch and check the default model\n        const response = await fetch(modelPath);\n        console.log('[ModelContext] Fetch response status:', response.status);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n        }\n        console.log('[ModelContext] Model file exists, proceeding with loading');\n\n        // Log the content type and size\n        console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n        console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n        const blob = await response.blob();\n        console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n\n        // Create a local URL for the blob - this helps with debugging\n        const blobUrl = URL.createObjectURL(blob);\n        console.log('[ModelContext] Created blob URL:', blobUrl);\n\n        // Load and preload the model using useGLTF\n        console.log('[ModelContext] Preloading model...');\n        useGLTF.preload(modelPath);\n        console.log('[ModelContext] Model preloaded successfully');\n\n        // Load the model - we're using the original modelPath here, not the blob URL\n        // because useGLTF has better caching with the original path\n        console.log('[ModelContext] Loading model...');\n        const loadedModel = useGLTF(modelPath);\n        console.log('[ModelContext] Model loaded successfully:', loadedModel);\n\n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', loadedModel.scene.children.length);\n\n          // Log information about each child in the scene\n          loadedModel.scene.children.forEach((child, index) => {\n            console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n          });\n\n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        setModel(loadedModel);\n\n        // Cleanup the blob URL\n        URL.revokeObjectURL(blobUrl);\n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    _s(loadModel, \"IGuYIJXQxwQlauhzMzLewu4v2jg=\", false, function () {\n      return [useGLTF, useGLTF];\n    });\n    loadModel();\n\n    // Cleanup function\n    return () => {\n      try {\n        if (customModelUrl) {\n          useGLTF.dispose(customModelUrl);\n        } else {\n          useGLTF.dispose(modelPath);\n        }\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, [customModelUrl]);\n\n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n\n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n    isCustomModel: !!customModelUrl\n  };\n  return /*#__PURE__*/_jsxDEV(ModelContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the context\n_s2(ModelProvider, \"pYJhjQE+Dm0kKeZdFQRlIt7nS/4=\");\n_c = ModelProvider;\nexport const useModel = () => {\n  _s3();\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n_s3(useModel, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ModelContext;\nvar _c;\n$RefreshReg$(_c, \"ModelProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useGLTF","getStadiumModelPath","jsxDEV","_jsxDEV","ModelContext","model","isLoading","error","ModelProvider","children","customModelUrl","_s2","setIsLoading","setError","setModel","isValidModel","loadedModel","scene","console","log","hasChildren","length","hasMeaningfulContent","some","child","type","geometry","_s","$RefreshSig$","modelPath","loadModel","preload","forEach","index","name","isValid","warn","Error","response","fetch","status","ok","statusText","headers","get","blob","size","blobUrl","URL","createObjectURL","revokeObjectURL","err","dispose","value","isCustomModel","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModel","_s3","context","$RefreshReg$"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js"],"sourcesContent":["// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\n\n// Create a context for sharing model loading state\nconst ModelContext = createContext({\n  model: null,\n  isLoading: true,\n  error: null,\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({ children, customModelUrl = null }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n  \n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = (loadedModel) => {\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n    \n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n    \n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n      \n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && \n          child.children && child.children.length > 0) {\n        return true;\n      }\n      \n      return false;\n    });\n    \n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    \n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n  \n  // Load the model once when the provider mounts or when customModelUrl changes\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    \n    // Determine which model to load\n    const modelPath = customModelUrl || getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    \n    const loadModel = async () => {\n      try {\n        // If we have a custom model URL, just load it directly\n        if (customModelUrl) {\n          console.log('[ModelContext] Loading custom model from URL:', customModelUrl);\n          \n          // Preload the model\n          useGLTF.preload(customModelUrl);\n          console.log('[ModelContext] Custom model preloaded successfully');\n          \n          // Load the model\n          const loadedModel = useGLTF(customModelUrl);\n          console.log('[ModelContext] Custom model loaded successfully:', loadedModel);\n          \n          // Check if the model has a scene and is valid\n          if (loadedModel.scene) {\n            console.log('[ModelContext] Custom model has a valid scene:', loadedModel.scene);\n            console.log('[ModelContext] Scene children:', loadedModel.scene.children.length);\n            \n            // Log information about each child in the scene\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n            \n            // Validate the model\n            const isValid = isValidModel(loadedModel);\n            if (!isValid) {\n              console.warn('[ModelContext] Custom model is not valid for rendering, will use fallback');\n              setError(new Error('Custom model is not valid for rendering'));\n            }\n          } else {\n            console.warn('[ModelContext] Custom model loaded but has no scene');\n            setError(new Error('Custom model has no scene'));\n          }\n          \n          setModel(loadedModel);\n          setIsLoading(false);\n          return;\n        }\n        \n        // Otherwise, fetch and check the default model\n        const response = await fetch(modelPath);\n        console.log('[ModelContext] Fetch response status:', response.status);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n        }\n        console.log('[ModelContext] Model file exists, proceeding with loading');\n        \n        // Log the content type and size\n        console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n        console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n        \n        const blob = await response.blob();\n        console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n        \n        // Create a local URL for the blob - this helps with debugging\n        const blobUrl = URL.createObjectURL(blob);\n        console.log('[ModelContext] Created blob URL:', blobUrl);\n        \n        // Load and preload the model using useGLTF\n        console.log('[ModelContext] Preloading model...');\n        useGLTF.preload(modelPath);\n        console.log('[ModelContext] Model preloaded successfully');\n        \n        // Load the model - we're using the original modelPath here, not the blob URL\n        // because useGLTF has better caching with the original path\n        console.log('[ModelContext] Loading model...');\n        const loadedModel = useGLTF(modelPath);\n        console.log('[ModelContext] Model loaded successfully:', loadedModel);\n        \n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', loadedModel.scene.children.length);\n          \n          // Log information about each child in the scene\n          loadedModel.scene.children.forEach((child, index) => {\n            console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n          });\n          \n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        \n        setModel(loadedModel);\n        \n        // Cleanup the blob URL\n        URL.revokeObjectURL(blobUrl);\n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadModel();\n    \n    // Cleanup function\n    return () => {\n      try {\n        if (customModelUrl) {\n          useGLTF.dispose(customModelUrl);\n        } else {\n          useGLTF.dispose(modelPath);\n        }\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, [customModelUrl]);\n  \n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n  \n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n    isCustomModel: !!customModelUrl\n  };\n  \n  return (\n    <ModelContext.Provider value={value}>\n      {children}\n    </ModelContext.Provider>\n  );\n};\n\n// Custom hook for consuming the context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\nexport default ModelContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}