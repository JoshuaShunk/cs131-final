{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { useLoader } from '@react-three/fiber';\n\n// Register the ColladaLoader with useLoader\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nuseLoader.preload(ColladaLoader, '/models/stadium.dae');\n\n// Create a context for sharing model loading state\nconst ModelContext = /*#__PURE__*/createContext({\n  model: null,\n  isLoading: true,\n  error: null\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({\n  children,\n  customModelUrl = null\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n\n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = loadedModel => {\n    // For Collada models with no scene property\n    if (loadedModel && !loadedModel.scene && isColladaModel(loadedModel)) {\n      console.log('[ModelContext] Model appears to be a valid Collada model without scene property');\n\n      // For DAE models, check if it has kinematics or dae properties\n      if (loadedModel.kinematics || loadedModel.dae) {\n        console.log('[ModelContext] DAE model has kinematics or dae property', loadedModel.kinematics ? 'Has kinematics' : 'No kinematics', loadedModel.dae ? 'Has dae' : 'No dae');\n\n        // Check for geometries or scene\n        if (loadedModel.geometries || loadedModel.scene) {\n          console.log('[ModelContext] DAE model has geometries or scene', loadedModel.geometries ? `Has ${loadedModel.geometries.length} geometries` : 'No geometries', loadedModel.scene ? 'Has scene' : 'No scene');\n          return true;\n        }\n      }\n\n      // If this is a Collada model but doesn't have required properties, still\n      // return true as we'll try to render it anyway\n      return true;\n    }\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n\n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n\n    // Log information about each child in the scene\n    if (loadedModel.scene.children) {\n      loadedModel.scene.children.forEach((child, index) => {\n        console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name, child.geometry ? 'Has geometry' : 'No geometry', child.children ? `Has ${child.children.length} children` : 'No children');\n      });\n    }\n\n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n\n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && child.children && child.children.length > 0) {\n        return true;\n      }\n      return false;\n    });\n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n\n  // Helper function to detect if a model is a Collada model\n  const isColladaModel = model => {\n    // Check for null model\n    if (!model) {\n      return false;\n    }\n\n    // Log model structure to help with debugging\n    console.log('[ModelContext] Checking if model is Collada:', 'Keys:', Object.keys(model).join(', '), 'Has dae:', !!model.dae, 'Has kinematics:', !!model.kinematics, 'Has geometries:', !!model.geometries);\n\n    // Collada loader sometimes doesn't use a scene property\n    // Instead it directly returns the model structure\n    return model.dae && model.kinematics ||\n    // Check for Collada-specific properties\n    model.geometries && model.materials && model.kinematics || model.scene && model.scene.type === 'Scene' || typeof model.type === 'string' && model.type.includes('Scene');\n  };\n\n  // Load the model once when the provider mounts or when customModelUrl changes\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    setIsLoading(true);\n    setError(null);\n\n    // Determine which model to load\n    const modelPath = customModelUrl || getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    const loadModel = async () => {\n      _s();\n      try {\n        // Check if it's a DAE file\n        const isDAE = modelPath.toLowerCase().endsWith('.dae');\n        let loadedModel;\n        if (isDAE) {\n          console.log('[ModelContext] Loading Collada (.dae) model:', modelPath);\n          try {\n            // First check if the model exists\n            const response = await fetch(modelPath);\n            if (!response.ok) {\n              console.error(`[ModelContext] DAE model file not found: ${modelPath}. Status: ${response.status}`);\n              throw new Error(`Failed to fetch DAE model: ${response.status} ${response.statusText}`);\n            }\n            console.log('[ModelContext] DAE model file exists, proceeding with loading');\n            console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n            console.log('[ModelContext] Content-Length:', response.headers.get('content-length'), 'bytes');\n\n            // Use ColladaLoader for .dae files\n            loadedModel = await new Promise((resolve, reject) => {\n              const loader = new ColladaLoader();\n              loader.load(modelPath, result => {\n                console.log('[ModelContext] Collada model loaded successfully:', result);\n                resolve(result);\n              }, progress => {\n                console.log('[ModelContext] Loading progress:', progress);\n              }, error => {\n                console.error('[ModelContext] Error loading Collada model:', error);\n                reject(error);\n              });\n            });\n            console.log('[ModelContext] Collada model loaded:', loadedModel);\n\n            // Create a scene-like structure for DAE model to match GLB/GLTF format\n            if (loadedModel && loadedModel.scene) {\n              console.log('[ModelContext] DAE model has scene property');\n            } else if (loadedModel) {\n              console.log('[ModelContext] Converting DAE model to compatible format');\n              // For Collada models, we need to adapt the structure to match what the components expect\n              const originalModel = loadedModel;\n              loadedModel = {\n                scene: originalModel.scene || originalModel,\n                animations: originalModel.animations || []\n              };\n            }\n          } catch (daeError) {\n            console.error('[ModelContext] Error loading DAE model:', daeError);\n            throw daeError;\n          }\n        } else {\n          // If we have a custom model URL that is not DAE, just load it directly\n          if (customModelUrl) {\n            console.log('[ModelContext] Loading custom model from URL:', customModelUrl);\n\n            // Preload the model\n            useGLTF.preload(customModelUrl);\n            console.log('[ModelContext] Custom model preloaded successfully');\n\n            // Load the model\n            loadedModel = useGLTF(customModelUrl);\n            console.log('[ModelContext] Custom model loaded successfully:', loadedModel);\n          } else {\n            // For .glb or .gltf files, use the existing approach\n            // ... rest of the existing loadModel logic for GLB files ...\n            console.log('[ModelContext] Loading GLB/GLTF model');\n\n            // Check if the model file exists before loading\n            const response = await fetch(modelPath);\n            console.log('[ModelContext] Fetch response status:', response.status);\n            if (!response.ok) {\n              throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n            }\n            console.log('[ModelContext] Model file exists, proceeding with loading');\n\n            // Log the content type and size\n            console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n            console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n            const blob = await response.blob();\n            console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n\n            // Preload and load the model\n            useGLTF.preload(modelPath);\n            loadedModel = useGLTF(modelPath);\n            console.log('[ModelContext] Model loaded successfully:', loadedModel);\n          }\n        }\n\n        // ... rest of the existing code for model validation ...\n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          var _loadedModel$scene$ch;\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', ((_loadedModel$scene$ch = loadedModel.scene.children) === null || _loadedModel$scene$ch === void 0 ? void 0 : _loadedModel$scene$ch.length) || 0);\n\n          // Log information about each child in the scene\n          if (loadedModel.scene.children) {\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n          }\n\n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        setModel(loadedModel);\n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    _s(loadModel, \"NubFgL5h0lc1DF+kpZLBbgqTpPw=\", false, function () {\n      return [useGLTF, useGLTF];\n    });\n    loadModel();\n\n    // Cleanup function\n    return () => {\n      try {\n        if (customModelUrl) {\n          useGLTF.dispose(customModelUrl);\n        } else if (!modelPath.toLowerCase().endsWith('.dae')) {\n          // Only dispose GLB/GLTF models, not DAE\n          useGLTF.dispose(modelPath);\n        }\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, [customModelUrl]);\n\n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n\n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n    isCustomModel: !!customModelUrl\n  };\n  return /*#__PURE__*/_jsxDEV(ModelContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the context\n_s2(ModelProvider, \"pYJhjQE+Dm0kKeZdFQRlIt7nS/4=\");\n_c = ModelProvider;\nexport const useModel = () => {\n  _s3();\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n_s3(useModel, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ModelContext;\nvar _c;\n$RefreshReg$(_c, \"ModelProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useGLTF","getStadiumModelPath","ColladaLoader","useLoader","jsxDEV","_jsxDEV","preload","ModelContext","model","isLoading","error","ModelProvider","children","customModelUrl","_s2","setIsLoading","setError","setModel","isValidModel","loadedModel","scene","isColladaModel","console","log","kinematics","dae","geometries","length","hasChildren","forEach","child","index","type","name","geometry","hasMeaningfulContent","some","Object","keys","join","materials","includes","_s","$RefreshSig$","modelPath","loadModel","isDAE","toLowerCase","endsWith","response","fetch","ok","status","Error","statusText","headers","get","Promise","resolve","reject","loader","load","result","progress","originalModel","animations","daeError","blob","size","_loadedModel$scene$ch","isValid","warn","err","dispose","value","isCustomModel","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModel","_s3","context","$RefreshReg$"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js"],"sourcesContent":["// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { useLoader } from '@react-three/fiber';\n\n// Register the ColladaLoader with useLoader\nuseLoader.preload(ColladaLoader, '/models/stadium.dae');\n\n// Create a context for sharing model loading state\nconst ModelContext = createContext({\n  model: null,\n  isLoading: true,\n  error: null,\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({ children, customModelUrl = null }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n  \n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = (loadedModel) => {\n    // For Collada models with no scene property\n    if (loadedModel && !loadedModel.scene && isColladaModel(loadedModel)) {\n      console.log('[ModelContext] Model appears to be a valid Collada model without scene property');\n      \n      // For DAE models, check if it has kinematics or dae properties\n      if (loadedModel.kinematics || loadedModel.dae) {\n        console.log('[ModelContext] DAE model has kinematics or dae property', \n          loadedModel.kinematics ? 'Has kinematics' : 'No kinematics',\n          loadedModel.dae ? 'Has dae' : 'No dae'\n        );\n        \n        // Check for geometries or scene\n        if (loadedModel.geometries || loadedModel.scene) {\n          console.log('[ModelContext] DAE model has geometries or scene', \n            loadedModel.geometries ? `Has ${loadedModel.geometries.length} geometries` : 'No geometries',\n            loadedModel.scene ? 'Has scene' : 'No scene'\n          );\n          return true;\n        }\n      }\n      \n      // If this is a Collada model but doesn't have required properties, still\n      // return true as we'll try to render it anyway\n      return true;\n    }\n    \n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n    \n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n    \n    // Log information about each child in the scene\n    if (loadedModel.scene.children) {\n      loadedModel.scene.children.forEach((child, index) => {\n        console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name,\n          child.geometry ? 'Has geometry' : 'No geometry',\n          child.children ? `Has ${child.children.length} children` : 'No children'\n        );\n      });\n    }\n    \n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n      \n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && \n          child.children && child.children.length > 0) {\n        return true;\n      }\n      \n      return false;\n    });\n    \n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    \n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n  \n  // Helper function to detect if a model is a Collada model\n  const isColladaModel = (model) => {\n    // Check for null model\n    if (!model) {\n      return false;\n    }\n    \n    // Log model structure to help with debugging\n    console.log('[ModelContext] Checking if model is Collada:', \n      'Keys:', Object.keys(model).join(', '),\n      'Has dae:', !!model.dae,\n      'Has kinematics:', !!model.kinematics,\n      'Has geometries:', !!model.geometries\n    );\n    \n    // Collada loader sometimes doesn't use a scene property\n    // Instead it directly returns the model structure\n    return (\n      (model.dae && model.kinematics) || // Check for Collada-specific properties\n      (model.geometries && model.materials && model.kinematics) ||\n      (model.scene && model.scene.type === 'Scene') ||\n      (typeof model.type === 'string' && model.type.includes('Scene'))\n    );\n  };\n  \n  // Load the model once when the provider mounts or when customModelUrl changes\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    \n    // Determine which model to load\n    const modelPath = customModelUrl || getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    \n    const loadModel = async () => {\n      try {\n        // Check if it's a DAE file\n        const isDAE = modelPath.toLowerCase().endsWith('.dae');\n        let loadedModel;\n        \n        if (isDAE) {\n          console.log('[ModelContext] Loading Collada (.dae) model:', modelPath);\n          try {\n            // First check if the model exists\n            const response = await fetch(modelPath);\n            if (!response.ok) {\n              console.error(`[ModelContext] DAE model file not found: ${modelPath}. Status: ${response.status}`);\n              throw new Error(`Failed to fetch DAE model: ${response.status} ${response.statusText}`);\n            }\n            \n            console.log('[ModelContext] DAE model file exists, proceeding with loading');\n            console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n            console.log('[ModelContext] Content-Length:', response.headers.get('content-length'), 'bytes');\n            \n            // Use ColladaLoader for .dae files\n            loadedModel = await new Promise((resolve, reject) => {\n              const loader = new ColladaLoader();\n              loader.load(\n                modelPath,\n                (result) => {\n                  console.log('[ModelContext] Collada model loaded successfully:', result);\n                  resolve(result);\n                },\n                (progress) => {\n                  console.log('[ModelContext] Loading progress:', progress);\n                },\n                (error) => {\n                  console.error('[ModelContext] Error loading Collada model:', error);\n                  reject(error);\n                }\n              );\n            });\n            \n            console.log('[ModelContext] Collada model loaded:', loadedModel);\n            \n            // Create a scene-like structure for DAE model to match GLB/GLTF format\n            if (loadedModel && loadedModel.scene) {\n              console.log('[ModelContext] DAE model has scene property');\n            } else if (loadedModel) {\n              console.log('[ModelContext] Converting DAE model to compatible format');\n              // For Collada models, we need to adapt the structure to match what the components expect\n              const originalModel = loadedModel;\n              loadedModel = {\n                scene: originalModel.scene || originalModel,\n                animations: originalModel.animations || []\n              };\n            }\n          } catch (daeError) {\n            console.error('[ModelContext] Error loading DAE model:', daeError);\n            throw daeError;\n          }\n        } else {\n          // If we have a custom model URL that is not DAE, just load it directly\n          if (customModelUrl) {\n            console.log('[ModelContext] Loading custom model from URL:', customModelUrl);\n            \n            // Preload the model\n            useGLTF.preload(customModelUrl);\n            console.log('[ModelContext] Custom model preloaded successfully');\n            \n            // Load the model\n            loadedModel = useGLTF(customModelUrl);\n            console.log('[ModelContext] Custom model loaded successfully:', loadedModel);\n          } else {\n            // For .glb or .gltf files, use the existing approach\n            // ... rest of the existing loadModel logic for GLB files ...\n            console.log('[ModelContext] Loading GLB/GLTF model');\n            \n            // Check if the model file exists before loading\n            const response = await fetch(modelPath);\n            console.log('[ModelContext] Fetch response status:', response.status);\n            if (!response.ok) {\n              throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n            }\n            \n            console.log('[ModelContext] Model file exists, proceeding with loading');\n            \n            // Log the content type and size\n            console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n            console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n            \n            const blob = await response.blob();\n            console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n            \n            // Preload and load the model\n            useGLTF.preload(modelPath);\n            loadedModel = useGLTF(modelPath);\n            console.log('[ModelContext] Model loaded successfully:', loadedModel);\n          }\n        }\n        \n        // ... rest of the existing code for model validation ...\n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', loadedModel.scene.children?.length || 0);\n          \n          // Log information about each child in the scene\n          if (loadedModel.scene.children) {\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n          }\n          \n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        \n        setModel(loadedModel);\n        \n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadModel();\n    \n    // Cleanup function\n    return () => {\n      try {\n        if (customModelUrl) {\n          useGLTF.dispose(customModelUrl);\n        } else if (!modelPath.toLowerCase().endsWith('.dae')) {\n          // Only dispose GLB/GLTF models, not DAE\n          useGLTF.dispose(modelPath);\n        }\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, [customModelUrl]);\n  \n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n  \n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n    isCustomModel: !!customModelUrl\n  };\n  \n  return (\n    <ModelContext.Provider value={value}>\n      {children}\n    </ModelContext.Provider>\n  );\n};\n\n// Custom hook for consuming the context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\nexport default ModelContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}