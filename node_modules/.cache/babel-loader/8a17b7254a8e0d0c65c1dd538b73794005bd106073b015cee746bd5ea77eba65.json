{"ast":null,"code":"import * as o from \"react\";\nconst f = /* @__PURE__ */(() => {\n  var e, t;\n  return typeof window != \"undefined\" && (((e = window.document) == null ? void 0 : e.createElement) || ((t = window.navigator) == null ? void 0 : t.product) === \"ReactNative\");\n})() ? o.useLayoutEffect : o.useEffect;\nfunction i(e, t, r) {\n  if (!e) return;\n  if (r(e) === !0) return e;\n  let n = t ? e.return : e.child;\n  for (; n;) {\n    const u = i(n, t, r);\n    if (u) return u;\n    n = t ? null : n.sibling;\n  }\n}\nfunction l(e) {\n  try {\n    return Object.defineProperties(e, {\n      _currentRenderer: {\n        get() {\n          return null;\n        },\n        set() {}\n      },\n      _currentRenderer2: {\n        get() {\n          return null;\n        },\n        set() {}\n      }\n    });\n  } catch (t) {\n    return e;\n  }\n}\nconst a = /* @__PURE__ */l(/* @__PURE__ */o.createContext(null));\nclass m extends o.Component {\n  render() {\n    return /* @__PURE__ */o.createElement(a.Provider, {\n      value: this._reactInternals\n    }, this.props.children);\n  }\n}\nfunction c() {\n  const e = o.useContext(a);\n  if (e === null) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  const t = o.useId();\n  return o.useMemo(() => {\n    for (const n of [e, e == null ? void 0 : e.alternate]) {\n      if (!n) continue;\n      const u = i(n, !1, d => {\n        let s = d.memoizedState;\n        for (; s;) {\n          if (s.memoizedState === t) return !0;\n          s = s.next;\n        }\n      });\n      if (u) return u;\n    }\n  }, [e, t]);\n}\nfunction w() {\n  const e = c(),\n    t = o.useMemo(() => i(e, !0, r => {\n      var n;\n      return ((n = r.stateNode) == null ? void 0 : n.containerInfo) != null;\n    }), [e]);\n  return t == null ? void 0 : t.stateNode.containerInfo;\n}\nfunction v(e) {\n  const t = c(),\n    r = o.useRef(void 0);\n  return f(() => {\n    var n;\n    r.current = (n = i(t, !1, u => typeof u.type == \"string\" && (e === void 0 || u.type === e))) == null ? void 0 : n.stateNode;\n  }, [t]), r;\n}\nfunction y(e) {\n  const t = c(),\n    r = o.useRef(void 0);\n  return f(() => {\n    var n;\n    r.current = (n = i(t, !0, u => typeof u.type == \"string\" && (e === void 0 || u.type === e))) == null ? void 0 : n.stateNode;\n  }, [t]), r;\n}\nconst p = Symbol.for(\"react.context\"),\n  b = e => e !== null && typeof e == \"object\" && \"$$typeof\" in e && e.$$typeof === p;\nfunction h() {\n  const e = c(),\n    [t] = o.useState(() => /* @__PURE__ */new Map());\n  t.clear();\n  let r = e;\n  for (; r;) {\n    const n = r.type;\n    b(n) && n !== a && !t.has(n) && t.set(n, o.use(l(n))), r = r.return;\n  }\n  return t;\n}\nfunction x() {\n  const e = h();\n  return o.useMemo(() => Array.from(e.keys()).reduce((t, r) => n => /* @__PURE__ */o.createElement(t, null, /* @__PURE__ */o.createElement(r.Provider, {\n    ...n,\n    value: e.get(r)\n  })), t => /* @__PURE__ */o.createElement(m, {\n    ...t\n  })), [e]);\n}\nexport { m as FiberProvider, i as traverseFiber, w as useContainer, x as useContextBridge, h as useContextMap, c as useFiber, v as useNearestChild, y as useNearestParent };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}