{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { useLoader } from '@react-three/fiber';\n\n// Register the ColladaLoader with useLoader\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nuseLoader.preload(ColladaLoader, '/models/stadium.dae');\n\n// Create a context for sharing model loading state\nconst ModelContext = /*#__PURE__*/createContext({\n  model: null,\n  isLoading: true,\n  error: null\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({\n  children,\n  customModelUrl = null\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n\n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = loadedModel => {\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n\n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n\n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n\n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && child.children && child.children.length > 0) {\n        return true;\n      }\n      return false;\n    });\n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n\n  // Load the model once when the provider mounts or when customModelUrl changes\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    setIsLoading(true);\n    setError(null);\n\n    // Determine which model to load\n    const modelPath = customModelUrl || getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    const loadModel = async () => {\n      _s();\n      try {\n        // Check if it's a DAE file\n        const isDAE = modelPath.toLowerCase().endsWith('.dae');\n        let loadedModel;\n        if (isDAE) {\n          console.log('[ModelContext] Loading Collada (.dae) model');\n          try {\n            // Use ColladaLoader for .dae files\n            loadedModel = await useLoader(ColladaLoader, modelPath);\n            console.log('[ModelContext] Collada model loaded:', loadedModel);\n\n            // Create a scene-like structure for DAE model to match GLB/GLTF format\n            if (loadedModel && loadedModel.scene) {\n              console.log('[ModelContext] DAE model has scene property');\n            } else if (loadedModel) {\n              console.log('[ModelContext] Converting DAE model to compatible format');\n              // For Collada models, we need to adapt the structure to match what the components expect\n              const originalModel = loadedModel;\n              loadedModel = {\n                scene: originalModel.scene || originalModel,\n                animations: originalModel.animations || []\n              };\n            }\n          } catch (daeError) {\n            console.error('[ModelContext] Error loading DAE model:', daeError);\n            throw daeError;\n          }\n        } else {\n          // If we have a custom model URL that is not DAE, just load it directly\n          if (customModelUrl) {\n            console.log('[ModelContext] Loading custom model from URL:', customModelUrl);\n\n            // Preload the model\n            useGLTF.preload(customModelUrl);\n            console.log('[ModelContext] Custom model preloaded successfully');\n\n            // Load the model\n            loadedModel = useGLTF(customModelUrl);\n            console.log('[ModelContext] Custom model loaded successfully:', loadedModel);\n          } else {\n            // For .glb or .gltf files, use the existing approach\n            // ... rest of the existing loadModel logic for GLB files ...\n            console.log('[ModelContext] Loading GLB/GLTF model');\n\n            // Check if the model file exists before loading\n            const response = await fetch(modelPath);\n            console.log('[ModelContext] Fetch response status:', response.status);\n            if (!response.ok) {\n              throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n            }\n            console.log('[ModelContext] Model file exists, proceeding with loading');\n\n            // Log the content type and size\n            console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n            console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n            const blob = await response.blob();\n            console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n\n            // Preload and load the model\n            useGLTF.preload(modelPath);\n            loadedModel = useGLTF(modelPath);\n            console.log('[ModelContext] Model loaded successfully:', loadedModel);\n          }\n        }\n\n        // ... rest of the existing code for model validation ...\n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          var _loadedModel$scene$ch;\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', ((_loadedModel$scene$ch = loadedModel.scene.children) === null || _loadedModel$scene$ch === void 0 ? void 0 : _loadedModel$scene$ch.length) || 0);\n\n          // Log information about each child in the scene\n          if (loadedModel.scene.children) {\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n          }\n\n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        setModel(loadedModel);\n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    _s(loadModel, \"JVEKYCdhJjMKsAUIb92V+D8G4ZM=\", false, function () {\n      return [useLoader, useGLTF, useGLTF];\n    });\n    loadModel();\n\n    // Cleanup function\n    return () => {\n      try {\n        if (customModelUrl) {\n          useGLTF.dispose(customModelUrl);\n        } else if (!modelPath.toLowerCase().endsWith('.dae')) {\n          // Only dispose GLB/GLTF models, not DAE\n          useGLTF.dispose(modelPath);\n        }\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, [customModelUrl]);\n\n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n\n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n    isCustomModel: !!customModelUrl\n  };\n  return /*#__PURE__*/_jsxDEV(ModelContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the context\n_s2(ModelProvider, \"pYJhjQE+Dm0kKeZdFQRlIt7nS/4=\");\n_c = ModelProvider;\nexport const useModel = () => {\n  _s3();\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n_s3(useModel, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ModelContext;\nvar _c;\n$RefreshReg$(_c, \"ModelProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useGLTF","getStadiumModelPath","ColladaLoader","useLoader","jsxDEV","_jsxDEV","preload","ModelContext","model","isLoading","error","ModelProvider","children","customModelUrl","_s2","setIsLoading","setError","setModel","isValidModel","loadedModel","scene","console","log","hasChildren","length","hasMeaningfulContent","some","child","type","geometry","_s","$RefreshSig$","modelPath","loadModel","isDAE","toLowerCase","endsWith","originalModel","animations","daeError","response","fetch","status","ok","Error","statusText","headers","get","blob","size","_loadedModel$scene$ch","forEach","index","name","isValid","warn","err","dispose","value","isCustomModel","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModel","_s3","context","$RefreshReg$"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js"],"sourcesContent":["// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { useLoader } from '@react-three/fiber';\n\n// Register the ColladaLoader with useLoader\nuseLoader.preload(ColladaLoader, '/models/stadium.dae');\n\n// Create a context for sharing model loading state\nconst ModelContext = createContext({\n  model: null,\n  isLoading: true,\n  error: null,\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({ children, customModelUrl = null }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n  \n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = (loadedModel) => {\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n    \n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n    \n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n      \n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && \n          child.children && child.children.length > 0) {\n        return true;\n      }\n      \n      return false;\n    });\n    \n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    \n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n  \n  // Load the model once when the provider mounts or when customModelUrl changes\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n    \n    // Determine which model to load\n    const modelPath = customModelUrl || getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    \n    const loadModel = async () => {\n      try {\n        // Check if it's a DAE file\n        const isDAE = modelPath.toLowerCase().endsWith('.dae');\n        let loadedModel;\n        \n        if (isDAE) {\n          console.log('[ModelContext] Loading Collada (.dae) model');\n          try {\n            // Use ColladaLoader for .dae files\n            loadedModel = await useLoader(ColladaLoader, modelPath);\n            console.log('[ModelContext] Collada model loaded:', loadedModel);\n            \n            // Create a scene-like structure for DAE model to match GLB/GLTF format\n            if (loadedModel && loadedModel.scene) {\n              console.log('[ModelContext] DAE model has scene property');\n            } else if (loadedModel) {\n              console.log('[ModelContext] Converting DAE model to compatible format');\n              // For Collada models, we need to adapt the structure to match what the components expect\n              const originalModel = loadedModel;\n              loadedModel = {\n                scene: originalModel.scene || originalModel,\n                animations: originalModel.animations || []\n              };\n            }\n          } catch (daeError) {\n            console.error('[ModelContext] Error loading DAE model:', daeError);\n            throw daeError;\n          }\n        } else {\n          // If we have a custom model URL that is not DAE, just load it directly\n          if (customModelUrl) {\n            console.log('[ModelContext] Loading custom model from URL:', customModelUrl);\n            \n            // Preload the model\n            useGLTF.preload(customModelUrl);\n            console.log('[ModelContext] Custom model preloaded successfully');\n            \n            // Load the model\n            loadedModel = useGLTF(customModelUrl);\n            console.log('[ModelContext] Custom model loaded successfully:', loadedModel);\n          } else {\n            // For .glb or .gltf files, use the existing approach\n            // ... rest of the existing loadModel logic for GLB files ...\n            console.log('[ModelContext] Loading GLB/GLTF model');\n            \n            // Check if the model file exists before loading\n            const response = await fetch(modelPath);\n            console.log('[ModelContext] Fetch response status:', response.status);\n            if (!response.ok) {\n              throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n            }\n            \n            console.log('[ModelContext] Model file exists, proceeding with loading');\n            \n            // Log the content type and size\n            console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n            console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n            \n            const blob = await response.blob();\n            console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n            \n            // Preload and load the model\n            useGLTF.preload(modelPath);\n            loadedModel = useGLTF(modelPath);\n            console.log('[ModelContext] Model loaded successfully:', loadedModel);\n          }\n        }\n        \n        // ... rest of the existing code for model validation ...\n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', loadedModel.scene.children?.length || 0);\n          \n          // Log information about each child in the scene\n          if (loadedModel.scene.children) {\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n          }\n          \n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        \n        setModel(loadedModel);\n        \n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadModel();\n    \n    // Cleanup function\n    return () => {\n      try {\n        if (customModelUrl) {\n          useGLTF.dispose(customModelUrl);\n        } else if (!modelPath.toLowerCase().endsWith('.dae')) {\n          // Only dispose GLB/GLTF models, not DAE\n          useGLTF.dispose(modelPath);\n        }\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, [customModelUrl]);\n  \n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n  \n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n    isCustomModel: !!customModelUrl\n  };\n  \n  return (\n    <ModelContext.Provider value={value}>\n      {children}\n    </ModelContext.Provider>\n  );\n};\n\n// Custom hook for consuming the context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\nexport default ModelContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}