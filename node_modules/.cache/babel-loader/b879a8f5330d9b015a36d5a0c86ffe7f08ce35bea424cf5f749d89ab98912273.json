{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\n\n// Create a context for sharing model loading state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModelContext = /*#__PURE__*/createContext({\n  model: null,\n  isLoading: true,\n  error: null\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n\n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = loadedModel => {\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n\n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n\n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n\n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && child.children && child.children.length > 0) {\n        return true;\n      }\n      return false;\n    });\n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n\n  // Load the model once when the provider mounts\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const modelPath = getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n\n    // Check if the model file exists\n    _s(fetch(modelPath).then(response => {\n      console.log('[ModelContext] Fetch response status:', response.status);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n      }\n      console.log('[ModelContext] Model file exists, proceeding with loading');\n\n      // Log the content type and size\n      console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n      console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n      return response.blob();\n    }).then(_s(blob => {\n      _s();\n      console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n      try {\n        // Create a local URL for the blob - this helps with debugging\n        const blobUrl = URL.createObjectURL(blob);\n        console.log('[ModelContext] Created blob URL:', blobUrl);\n\n        // Load and preload the model using useGLTF\n        console.log('[ModelContext] Preloading model...');\n        useGLTF.preload(modelPath);\n        console.log('[ModelContext] Model preloaded successfully');\n\n        // Load the model - we're using the original modelPath here, not the blob URL\n        // because useGLTF has better caching with the original path\n        console.log('[ModelContext] Loading model...');\n        const loadedModel = useGLTF(modelPath);\n        console.log('[ModelContext] Model loaded successfully:', loadedModel);\n\n        // Check if the model has a scene\n        if (loadedModel.scene) {\n          console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n          console.log('[ModelContext] Scene children:', loadedModel.scene.children.length);\n\n          // Log information about each child in the scene\n          loadedModel.scene.children.forEach((child, index) => {\n            console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n          });\n\n          // Validate the model\n          const isValid = isValidModel(loadedModel);\n          if (!isValid) {\n            console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n            setError(new Error('Model is not valid for rendering'));\n          }\n        } else {\n          console.warn('[ModelContext] Model loaded but has no scene');\n          setError(new Error('Model has no scene'));\n        }\n        setModel(loadedModel);\n        setIsLoading(false);\n\n        // Cleanup the blob URL\n        URL.revokeObjectURL(blobUrl);\n      } catch (err) {\n        console.error('[ModelContext] Error during model loading process:', err);\n        setError(err);\n        setIsLoading(false);\n      }\n    }, \"t44RiWpd4pf+mbHhF5ae0g+XZqk=\", false, function () {\n      return [useGLTF];\n    })), \"t44RiWpd4pf+mbHhF5ae0g+XZqk=\", false, function () {\n      return [useGLTF];\n    }).catch(err => {\n      console.error('[ModelContext] Error fetching model:', err);\n      setError(err);\n      setIsLoading(false);\n    });\n\n    // Cleanup function\n    return () => {\n      try {\n        useGLTF.dispose(modelPath);\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, []);\n\n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n\n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(ModelContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the context\n_s2(ModelProvider, \"pYJhjQE+Dm0kKeZdFQRlIt7nS/4=\");\n_c = ModelProvider;\nexport const useModel = () => {\n  _s3();\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n_s3(useModel, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ModelContext;\nvar _c;\n$RefreshReg$(_c, \"ModelProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useGLTF","getStadiumModelPath","jsxDEV","_jsxDEV","ModelContext","model","isLoading","error","ModelProvider","children","_s2","setIsLoading","setError","setModel","isValidModel","loadedModel","scene","console","log","hasChildren","length","hasMeaningfulContent","some","child","type","geometry","_s","$RefreshSig$","modelPath","fetch","then","response","status","ok","Error","statusText","headers","get","blob","size","blobUrl","URL","createObjectURL","preload","forEach","index","name","isValid","warn","revokeObjectURL","err","catch","dispose","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModel","_s3","context","$RefreshReg$"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js"],"sourcesContent":["// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\n\n// Create a context for sharing model loading state\nconst ModelContext = createContext({\n  model: null,\n  isLoading: true,\n  error: null,\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n  \n  // Helper function to check if a model is valid and has usable geometry\n  const isValidModel = (loadedModel) => {\n    if (!loadedModel || !loadedModel.scene) {\n      console.log('[ModelContext] Model is invalid: No scene found');\n      return false;\n    }\n    \n    // Check if scene has any meaningful children\n    const hasChildren = loadedModel.scene.children && loadedModel.scene.children.length > 0;\n    if (!hasChildren) {\n      console.log('[ModelContext] Model is invalid: Scene has no children');\n      return false;\n    }\n    \n    // Check if any child has geometry (mesh or nested children)\n    const hasMeaningfulContent = loadedModel.scene.children.some(child => {\n      // Check if it's a mesh with geometry\n      if (child.type === 'Mesh' && child.geometry) {\n        return true;\n      }\n      \n      // Check if it's a group with children\n      if ((child.type === 'Group' || child.type === 'Object3D') && \n          child.children && child.children.length > 0) {\n        return true;\n      }\n      \n      return false;\n    });\n    \n    if (!hasMeaningfulContent) {\n      console.log('[ModelContext] Model is invalid: No meaningful geometry found');\n      return false;\n    }\n    \n    console.log('[ModelContext] Model is valid and has usable geometry');\n    return true;\n  };\n  \n  // Load the model once when the provider mounts\n  useEffect(() => {\n    const modelPath = getStadiumModelPath();\n    console.log('[ModelContext] Loading model from path:', modelPath);\n    \n    // Check if the model file exists\n    fetch(modelPath)\n      .then(response => {\n        console.log('[ModelContext] Fetch response status:', response.status);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n        }\n        console.log('[ModelContext] Model file exists, proceeding with loading');\n        \n        // Log the content type and size\n        console.log('[ModelContext] Content-Type:', response.headers.get('content-type'));\n        console.log('[ModelContext] Content-Length:', response.headers.get('content-length'));\n        \n        return response.blob();\n      })\n      .then(blob => {\n        console.log('[ModelContext] Model blob size:', blob.size, 'bytes');\n        \n        try {\n          // Create a local URL for the blob - this helps with debugging\n          const blobUrl = URL.createObjectURL(blob);\n          console.log('[ModelContext] Created blob URL:', blobUrl);\n          \n          // Load and preload the model using useGLTF\n          console.log('[ModelContext] Preloading model...');\n          useGLTF.preload(modelPath);\n          console.log('[ModelContext] Model preloaded successfully');\n          \n          // Load the model - we're using the original modelPath here, not the blob URL\n          // because useGLTF has better caching with the original path\n          console.log('[ModelContext] Loading model...');\n          const loadedModel = useGLTF(modelPath);\n          console.log('[ModelContext] Model loaded successfully:', loadedModel);\n          \n          // Check if the model has a scene\n          if (loadedModel.scene) {\n            console.log('[ModelContext] Model has a valid scene:', loadedModel.scene);\n            console.log('[ModelContext] Scene children:', loadedModel.scene.children.length);\n            \n            // Log information about each child in the scene\n            loadedModel.scene.children.forEach((child, index) => {\n              console.log(`[ModelContext] Scene child ${index}:`, child.type, child.name);\n            });\n            \n            // Validate the model\n            const isValid = isValidModel(loadedModel);\n            if (!isValid) {\n              console.warn('[ModelContext] Model is not valid for rendering, will use fallback');\n              setError(new Error('Model is not valid for rendering'));\n            }\n          } else {\n            console.warn('[ModelContext] Model loaded but has no scene');\n            setError(new Error('Model has no scene'));\n          }\n          \n          setModel(loadedModel);\n          setIsLoading(false);\n          \n          // Cleanup the blob URL\n          URL.revokeObjectURL(blobUrl);\n        } catch (err) {\n          console.error('[ModelContext] Error during model loading process:', err);\n          setError(err);\n          setIsLoading(false);\n        }\n      })\n      .catch(err => {\n        console.error('[ModelContext] Error fetching model:', err);\n        setError(err);\n        setIsLoading(false);\n      });\n    \n    // Cleanup function\n    return () => {\n      try {\n        useGLTF.dispose(modelPath);\n      } catch (err) {\n        console.error('[ModelContext] Error disposing model:', err);\n      }\n    };\n  }, []);\n  \n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('[ModelContext] Model is available in context:', model);\n    }\n    if (error) {\n      console.error('[ModelContext] Error in model context:', error);\n    }\n  }, [model, error]);\n  \n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n  };\n  \n  return (\n    <ModelContext.Provider value={value}>\n      {children}\n    </ModelContext.Provider>\n  );\n};\n\n// Custom hook for consuming the context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\nexport default ModelContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}