{"ast":null,"code":"var _jsxFileName = \"/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\n\n// Create a context for sharing model loading state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModelContext = /*#__PURE__*/createContext({\n  model: null,\n  isLoading: true,\n  error: null\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n\n  // Load the model once when the provider mounts\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const modelPath = getStadiumModelPath();\n    console.log('Loading model from path:', modelPath);\n\n    // Check if the model file exists\n    _s(fetch(modelPath).then(_s(response => {\n      _s();\n      if (!response.ok) {\n        throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n      }\n      console.log('Model file exists, proceeding with loading');\n      try {\n        // Preload the model\n        useGLTF.preload(modelPath);\n        console.log('Model preloaded successfully');\n\n        // Load the model\n        const loadedModel = useGLTF(modelPath);\n        console.log('Model loaded successfully:', loadedModel);\n        setModel(loadedModel);\n        setIsLoading(false);\n      } catch (err) {\n        console.error('Error during model loading process:', err);\n        setError(err);\n        setIsLoading(false);\n      }\n    }, \"t44RiWpd4pf+mbHhF5ae0g+XZqk=\", false, function () {\n      return [useGLTF];\n    })), \"t44RiWpd4pf+mbHhF5ae0g+XZqk=\", false, function () {\n      return [useGLTF];\n    }).catch(err => {\n      console.error('Error fetching model:', err);\n      setError(err);\n      setIsLoading(false);\n    });\n\n    // Cleanup function\n    return () => {\n      try {\n        useGLTF.dispose(modelPath);\n      } catch (err) {\n        console.error('Error disposing model:', err);\n      }\n    };\n  }, []);\n\n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('Model is available in context:', model);\n    }\n    if (error) {\n      console.error('Error in model context:', error);\n    }\n  }, [model, error]);\n\n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(ModelContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for consuming the context\n_s2(ModelProvider, \"pYJhjQE+Dm0kKeZdFQRlIt7nS/4=\");\n_c = ModelProvider;\nexport const useModel = () => {\n  _s3();\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n_s3(useModel, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default ModelContext;\nvar _c;\n$RefreshReg$(_c, \"ModelProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useGLTF","getStadiumModelPath","jsxDEV","_jsxDEV","ModelContext","model","isLoading","error","ModelProvider","children","_s2","setIsLoading","setError","setModel","_s","$RefreshSig$","modelPath","console","log","fetch","then","response","ok","Error","status","statusText","preload","loadedModel","err","catch","dispose","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModel","_s3","context","$RefreshReg$"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/ModelContext.js"],"sourcesContent":["// @ts-nocheck\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useGLTF } from '@react-three/drei';\nimport { getStadiumModelPath } from './modelLoader';\n\n// Create a context for sharing model loading state\nconst ModelContext = createContext({\n  model: null,\n  isLoading: true,\n  error: null,\n});\n\n// Provider component that will wrap the application\nexport const ModelProvider = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [model, setModel] = useState(null);\n  \n  // Load the model once when the provider mounts\n  useEffect(() => {\n    const modelPath = getStadiumModelPath();\n    console.log('Loading model from path:', modelPath);\n    \n    // Check if the model file exists\n    fetch(modelPath)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch model: ${response.status} ${response.statusText}`);\n        }\n        console.log('Model file exists, proceeding with loading');\n        \n        try {\n          // Preload the model\n          useGLTF.preload(modelPath);\n          console.log('Model preloaded successfully');\n          \n          // Load the model\n          const loadedModel = useGLTF(modelPath);\n          console.log('Model loaded successfully:', loadedModel);\n          setModel(loadedModel);\n          setIsLoading(false);\n        } catch (err) {\n          console.error('Error during model loading process:', err);\n          setError(err);\n          setIsLoading(false);\n        }\n      })\n      .catch(err => {\n        console.error('Error fetching model:', err);\n        setError(err);\n        setIsLoading(false);\n      });\n    \n    // Cleanup function\n    return () => {\n      try {\n        useGLTF.dispose(modelPath);\n      } catch (err) {\n        console.error('Error disposing model:', err);\n      }\n    };\n  }, []);\n  \n  // Debug output when model or error changes\n  useEffect(() => {\n    if (model) {\n      console.log('Model is available in context:', model);\n    }\n    if (error) {\n      console.error('Error in model context:', error);\n    }\n  }, [model, error]);\n  \n  // Value to be provided to consumers\n  const value = {\n    model,\n    isLoading,\n    error,\n  };\n  \n  return (\n    <ModelContext.Provider value={value}>\n      {children}\n    </ModelContext.Provider>\n  );\n};\n\n// Custom hook for consuming the context\nexport const useModel = () => {\n  const context = useContext(ModelContext);\n  if (!context) {\n    throw new Error('useModel must be used within a ModelProvider');\n  }\n  return context;\n};\n\nexport default ModelContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}