{"ast":null,"code":"import { useGLTF } from '@react-three/drei';\n\n// Stadium model path\nconst STADIUM_MODEL_PATH = '/models/stadium.glb';\n\n// Supported 3D model formats\nexport const SUPPORTED_FORMATS = ['.glb',\n// Binary glTF\n'.gltf',\n// JSON glTF\n'.fbx',\n// Filmbox\n'.obj',\n// Wavefront OBJ\n'.stl',\n// Stereolithography\n'.dae' // Collada\n];\n\n// Preload the stadium model to improve performance\nexport const preloadModels = () => {\n  console.log('Preloading model from path:', STADIUM_MODEL_PATH);\n\n  // Check if the model file exists before preloading\n  fetch(STADIUM_MODEL_PATH).then(response => {\n    if (!response.ok) {\n      console.error(`Model file not found at ${STADIUM_MODEL_PATH}. Status: ${response.status}`);\n      return;\n    }\n    console.log('Model file exists, checking file size...');\n    return response.blob().then(blob => {\n      console.log(`Model file size: ${blob.size} bytes`);\n      if (blob.size < 1000) {\n        console.warn('Warning: Model file is very small, might be empty or invalid');\n      }\n\n      // Check if it's a DAE file\n      const isDAEFile = STADIUM_MODEL_PATH.toLowerCase().endsWith('.dae');\n      if (isDAEFile) {\n        console.log('DAE model detected - will be loaded with ColladaLoader when needed');\n        // We don't preload DAE files as they use a different loader\n        return;\n      } else {\n        // Only preload GLB/GLTF files with useGLTF\n        console.log('Model file exists, preloading with useGLTF...');\n        useGLTF.preload(STADIUM_MODEL_PATH);\n        console.log('Model preloaded successfully');\n      }\n    });\n  }).catch(error => {\n    console.error('Error checking model file:', error);\n  });\n};\n\n// Helper function to validate GLB files\nexport const validateGlbFile = async file => {\n  try {\n    // Check file extension\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n    const isSupported = SUPPORTED_FORMATS.some(ext => ext.includes(fileExtension));\n    if (!isSupported) {\n      return {\n        valid: false,\n        message: `File format .${fileExtension} is not supported. Supported formats: ${SUPPORTED_FORMATS.join(', ')}`\n      };\n    }\n\n    // For GLB files, check the magic bytes\n    if (fileExtension === 'glb') {\n      const arrayBuffer = await file.arrayBuffer();\n      const view = new DataView(arrayBuffer);\n\n      // GLB files start with magic \"glTF\"\n      const magic = view.getUint32(0, false);\n      if (magic !== 0x676C5446) {\n        // \"glTF\" in ASCII\n        return {\n          valid: false,\n          message: 'Invalid GLB file: Missing \"glTF\" magic bytes'\n        };\n      }\n\n      // Check version\n      const version = view.getUint32(4, true);\n      if (version !== 2) {\n        return {\n          valid: false,\n          message: `Unsupported GLB version: ${version}. Only version 2 is supported.`\n        };\n      }\n\n      // Check file length\n      const fileLength = view.getUint32(8, true);\n      if (fileLength > arrayBuffer.byteLength) {\n        return {\n          valid: false,\n          message: `Invalid GLB file: Expected length ${fileLength} exceeds actual size ${arrayBuffer.byteLength}`\n        };\n      }\n\n      // Check for JSON chunk\n      const chunkType = view.getUint32(16, true);\n      if (chunkType !== 0x4E4F534A) {\n        // \"JSON\" in ASCII\n        return {\n          valid: false,\n          message: 'Invalid GLB file: Missing JSON chunk'\n        };\n      }\n      return {\n        valid: true,\n        message: 'GLB file appears to be valid'\n      };\n    }\n\n    // For other formats, just return true (we can't validate them easily)\n    return {\n      valid: true,\n      message: `${fileExtension.toUpperCase()} file format detected`\n    };\n  } catch (error) {\n    return {\n      valid: false,\n      message: `Error validating file: ${error.message}`\n    };\n  }\n};\n\n// Helper function to position the camera at a specific seat\nexport const positionCameraAtSeat = (camera, seatCoordinates) => {\n  if (!camera || !seatCoordinates) return;\n\n  // Set camera position to the seat coordinates\n  camera.position.set(seatCoordinates.x || 0, seatCoordinates.y || 2, seatCoordinates.z || 10);\n\n  // You can also set the camera's lookAt target\n  // For example, to look at the center of the stadium\n  camera.lookAt(0, 0, 0);\n};\n\n// Helper function to convert Blender coordinates to Three.js coordinates\n// Blender uses Z-up, while Three.js uses Y-up\nexport const convertBlenderToThreeCoordinates = blenderCoords => {\n  return {\n    x: blenderCoords.x,\n    y: blenderCoords.z,\n    // Blender Z becomes Three.js Y\n    z: -blenderCoords.y // Blender Y becomes negative Three.js Z\n  };\n};\n\n// Helper function to handle model loading errors\nexport const handleModelError = error => {\n  console.error('Error loading model:', error);\n  return {\n    error: true,\n    message: 'Failed to load the 3D model. Please try again later.'\n  };\n};\n\n// Get the stadium model path - now we only use one model for all seats\nexport const getStadiumModelPath = () => {\n  return STADIUM_MODEL_PATH;\n};\nexport default {\n  preloadModels,\n  positionCameraAtSeat,\n  convertBlenderToThreeCoordinates,\n  handleModelError,\n  getStadiumModelPath\n};","map":{"version":3,"names":["useGLTF","STADIUM_MODEL_PATH","SUPPORTED_FORMATS","preloadModels","console","log","fetch","then","response","ok","error","status","blob","size","warn","isDAEFile","toLowerCase","endsWith","preload","catch","validateGlbFile","file","fileExtension","name","split","pop","isSupported","some","ext","includes","valid","message","join","arrayBuffer","view","DataView","magic","getUint32","version","fileLength","byteLength","chunkType","toUpperCase","positionCameraAtSeat","camera","seatCoordinates","position","set","x","y","z","lookAt","convertBlenderToThreeCoordinates","blenderCoords","handleModelError","getStadiumModelPath"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/modelLoader.js"],"sourcesContent":["import { useGLTF } from '@react-three/drei';\n\n// Stadium model path\nconst STADIUM_MODEL_PATH = '/models/stadium.glb';\n\n// Supported 3D model formats\nexport const SUPPORTED_FORMATS = [\n  '.glb',  // Binary glTF\n  '.gltf', // JSON glTF\n  '.fbx',  // Filmbox\n  '.obj',  // Wavefront OBJ\n  '.stl',  // Stereolithography\n  '.dae'   // Collada\n];\n\n// Preload the stadium model to improve performance\nexport const preloadModels = () => {\n  console.log('Preloading model from path:', STADIUM_MODEL_PATH);\n  \n  // Check if the model file exists before preloading\n  fetch(STADIUM_MODEL_PATH)\n    .then(response => {\n      if (!response.ok) {\n        console.error(`Model file not found at ${STADIUM_MODEL_PATH}. Status: ${response.status}`);\n        return;\n      }\n      \n      console.log('Model file exists, checking file size...');\n      return response.blob().then(blob => {\n        console.log(`Model file size: ${blob.size} bytes`);\n        \n        if (blob.size < 1000) {\n          console.warn('Warning: Model file is very small, might be empty or invalid');\n        }\n        \n        // Check if it's a DAE file\n        const isDAEFile = STADIUM_MODEL_PATH.toLowerCase().endsWith('.dae');\n        \n        if (isDAEFile) {\n          console.log('DAE model detected - will be loaded with ColladaLoader when needed');\n          // We don't preload DAE files as they use a different loader\n          return;\n        } else {\n          // Only preload GLB/GLTF files with useGLTF\n          console.log('Model file exists, preloading with useGLTF...');\n          useGLTF.preload(STADIUM_MODEL_PATH);\n          console.log('Model preloaded successfully');\n        }\n      });\n    })\n    .catch(error => {\n      console.error('Error checking model file:', error);\n    });\n};\n\n// Helper function to validate GLB files\nexport const validateGlbFile = async (file) => {\n  try {\n    // Check file extension\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n    const isSupported = SUPPORTED_FORMATS.some(ext => ext.includes(fileExtension));\n    if (!isSupported) {\n      return {\n        valid: false,\n        message: `File format .${fileExtension} is not supported. Supported formats: ${SUPPORTED_FORMATS.join(', ')}`\n      };\n    }\n    \n    // For GLB files, check the magic bytes\n    if (fileExtension === 'glb') {\n      const arrayBuffer = await file.arrayBuffer();\n      const view = new DataView(arrayBuffer);\n      \n      // GLB files start with magic \"glTF\"\n      const magic = view.getUint32(0, false);\n      if (magic !== 0x676C5446) { // \"glTF\" in ASCII\n        return {\n          valid: false,\n          message: 'Invalid GLB file: Missing \"glTF\" magic bytes'\n        };\n      }\n      \n      // Check version\n      const version = view.getUint32(4, true);\n      if (version !== 2) {\n        return {\n          valid: false,\n          message: `Unsupported GLB version: ${version}. Only version 2 is supported.`\n        };\n      }\n      \n      // Check file length\n      const fileLength = view.getUint32(8, true);\n      if (fileLength > arrayBuffer.byteLength) {\n        return {\n          valid: false,\n          message: `Invalid GLB file: Expected length ${fileLength} exceeds actual size ${arrayBuffer.byteLength}`\n        };\n      }\n      \n      // Check for JSON chunk\n      const chunkType = view.getUint32(16, true);\n      if (chunkType !== 0x4E4F534A) { // \"JSON\" in ASCII\n        return {\n          valid: false,\n          message: 'Invalid GLB file: Missing JSON chunk'\n        };\n      }\n      \n      return {\n        valid: true,\n        message: 'GLB file appears to be valid'\n      };\n    }\n    \n    // For other formats, just return true (we can't validate them easily)\n    return {\n      valid: true,\n      message: `${fileExtension.toUpperCase()} file format detected`\n    };\n  } catch (error) {\n    return {\n      valid: false,\n      message: `Error validating file: ${error.message}`\n    };\n  }\n};\n\n// Helper function to position the camera at a specific seat\nexport const positionCameraAtSeat = (camera, seatCoordinates) => {\n  if (!camera || !seatCoordinates) return;\n  \n  // Set camera position to the seat coordinates\n  camera.position.set(\n    seatCoordinates.x || 0,\n    seatCoordinates.y || 2,\n    seatCoordinates.z || 10\n  );\n  \n  // You can also set the camera's lookAt target\n  // For example, to look at the center of the stadium\n  camera.lookAt(0, 0, 0);\n};\n\n// Helper function to convert Blender coordinates to Three.js coordinates\n// Blender uses Z-up, while Three.js uses Y-up\nexport const convertBlenderToThreeCoordinates = (blenderCoords) => {\n  return {\n    x: blenderCoords.x,\n    y: blenderCoords.z, // Blender Z becomes Three.js Y\n    z: -blenderCoords.y // Blender Y becomes negative Three.js Z\n  };\n};\n\n// Helper function to handle model loading errors\nexport const handleModelError = (error) => {\n  console.error('Error loading model:', error);\n  return {\n    error: true,\n    message: 'Failed to load the 3D model. Please try again later.'\n  };\n};\n\n// Get the stadium model path - now we only use one model for all seats\nexport const getStadiumModelPath = () => {\n  return STADIUM_MODEL_PATH;\n};\n\nexport default {\n  preloadModels,\n  positionCameraAtSeat,\n  convertBlenderToThreeCoordinates,\n  handleModelError,\n  getStadiumModelPath\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}