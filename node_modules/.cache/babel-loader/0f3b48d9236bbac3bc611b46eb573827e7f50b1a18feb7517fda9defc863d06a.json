{"ast":null,"code":"import { parseAndGenerateSeats } from './seatCoordinateParser';\n\n/**\n * Loads seat coordinates from the coordinates.txt file and generates seat objects\n * @returns {Promise<Array>} Promise that resolves to an array of seat objects\n */\nexport const loadSeatsFromFile = async () => {\n  try {\n    // Fetch the coordinates.txt file\n    const response = await fetch('/coordinates.txt');\n    if (!response.ok) {\n      throw new Error(`Failed to load coordinates.txt: ${response.status} ${response.statusText}`);\n    }\n\n    // Get the text content\n    const text = await response.text();\n    console.log('Loaded coordinates file with length:', text.length);\n\n    // Parse the coordinates and generate seats\n    const seats = parseAndGenerateSeats(text);\n    console.log(`Generated ${seats.length} seats from coordinates`);\n\n    // Add more detailed seat info for better user experience\n    const enhancedSeats = enhanceSeats(seats);\n    return enhancedSeats;\n  } catch (error) {\n    console.error('Error loading seats from file:', error);\n    return []; // Return empty array on error\n  }\n};\n\n/**\n * Enhances basic seat data with more details like section names, meaningful IDs, etc.\n * @param {Array} basicSeats - Basic seat objects from the coordinate parser\n * @returns {Array} Enhanced seat objects with more detailed information\n */\nconst enhanceSeats = basicSeats => {\n  // Map of sections by quadrant\n  const sectionMap = {\n    'topLeft': ['A', 'B', 'C'],\n    'topRight': ['D', 'E', 'F'],\n    'bottomLeft': ['G', 'H', 'J'],\n    'bottomRight': ['K', 'L', 'M']\n  };\n\n  // Price tiers based on distance from center (higher = better view)\n  const priceTiers = [{\n    maxDistance: 0.2,\n    price: 250\n  }, {\n    maxDistance: 0.4,\n    price: 200\n  }, {\n    maxDistance: 0.6,\n    price: 150\n  }, {\n    maxDistance: 0.8,\n    price: 120\n  }, {\n    maxDistance: Infinity,\n    price: 100\n  }];\n  return basicSeats.map((seat, index) => {\n    // Determine quadrant based on x and y coordinates\n    const quadrant = seat.coordinates.x < 0 ? seat.coordinates.y < 0 ? 'bottomLeft' : 'topLeft' : seat.coordinates.y < 0 ? 'bottomRight' : 'topRight';\n\n    // Calculate distance from center (0,0) for price determination\n    const distance = Math.sqrt(Math.pow(seat.coordinates.x, 2) + Math.pow(seat.coordinates.y, 2));\n\n    // Determine price based on distance\n    const priceTier = priceTiers.find(tier => distance <= tier.maxDistance);\n    const price = priceTier ? priceTier.price : 100;\n\n    // Determine section, row, and seat number more meaningfully\n    const sectionList = sectionMap[quadrant];\n    const sectionIndex = Math.min(Math.floor(distance * sectionList.length), sectionList.length - 1);\n    const section = sectionList[sectionIndex];\n\n    // Row increases as y moves away from 0 (either positive or negative)\n    const row = Math.floor(Math.abs(seat.coordinates.y) * 10) + 1;\n\n    // Seat number increases as x moves away from 0 (either positive or negative)\n    const number = Math.floor(Math.abs(seat.coordinates.x) * 10) + 1;\n\n    // Create a more meaningful ID\n    const id = `${section}${row}-${number}`;\n    return {\n      id,\n      section,\n      row,\n      number,\n      price,\n      coordinates: seat.coordinates,\n      // Store original index for reference\n      originalIndex: index\n    };\n  });\n};\nexport default {\n  loadSeatsFromFile\n};","map":{"version":3,"names":["parseAndGenerateSeats","loadSeatsFromFile","response","fetch","ok","Error","status","statusText","text","console","log","length","seats","enhancedSeats","enhanceSeats","error","basicSeats","sectionMap","priceTiers","maxDistance","price","Infinity","map","seat","index","quadrant","coordinates","x","y","distance","Math","sqrt","pow","priceTier","find","tier","sectionList","sectionIndex","min","floor","section","row","abs","number","id","originalIndex"],"sources":["/Users/joshuashunk/Documents/cs131-nerf/src/utils/coordinateLoader.js"],"sourcesContent":["import { parseAndGenerateSeats } from './seatCoordinateParser';\n\n/**\n * Loads seat coordinates from the coordinates.txt file and generates seat objects\n * @returns {Promise<Array>} Promise that resolves to an array of seat objects\n */\nexport const loadSeatsFromFile = async () => {\n  try {\n    // Fetch the coordinates.txt file\n    const response = await fetch('/coordinates.txt');\n    if (!response.ok) {\n      throw new Error(`Failed to load coordinates.txt: ${response.status} ${response.statusText}`);\n    }\n    \n    // Get the text content\n    const text = await response.text();\n    console.log('Loaded coordinates file with length:', text.length);\n    \n    // Parse the coordinates and generate seats\n    const seats = parseAndGenerateSeats(text);\n    console.log(`Generated ${seats.length} seats from coordinates`);\n    \n    // Add more detailed seat info for better user experience\n    const enhancedSeats = enhanceSeats(seats);\n    \n    return enhancedSeats;\n  } catch (error) {\n    console.error('Error loading seats from file:', error);\n    return []; // Return empty array on error\n  }\n};\n\n/**\n * Enhances basic seat data with more details like section names, meaningful IDs, etc.\n * @param {Array} basicSeats - Basic seat objects from the coordinate parser\n * @returns {Array} Enhanced seat objects with more detailed information\n */\nconst enhanceSeats = (basicSeats) => {\n  // Map of sections by quadrant\n  const sectionMap = {\n    'topLeft': ['A', 'B', 'C'],\n    'topRight': ['D', 'E', 'F'],\n    'bottomLeft': ['G', 'H', 'J'],\n    'bottomRight': ['K', 'L', 'M']\n  };\n  \n  // Price tiers based on distance from center (higher = better view)\n  const priceTiers = [\n    { maxDistance: 0.2, price: 250 },\n    { maxDistance: 0.4, price: 200 },\n    { maxDistance: 0.6, price: 150 },\n    { maxDistance: 0.8, price: 120 },\n    { maxDistance: Infinity, price: 100 }\n  ];\n  \n  return basicSeats.map((seat, index) => {\n    // Determine quadrant based on x and y coordinates\n    const quadrant = seat.coordinates.x < 0 \n      ? (seat.coordinates.y < 0 ? 'bottomLeft' : 'topLeft')\n      : (seat.coordinates.y < 0 ? 'bottomRight' : 'topRight');\n    \n    // Calculate distance from center (0,0) for price determination\n    const distance = Math.sqrt(\n      Math.pow(seat.coordinates.x, 2) + \n      Math.pow(seat.coordinates.y, 2)\n    );\n    \n    // Determine price based on distance\n    const priceTier = priceTiers.find(tier => distance <= tier.maxDistance);\n    const price = priceTier ? priceTier.price : 100;\n    \n    // Determine section, row, and seat number more meaningfully\n    const sectionList = sectionMap[quadrant];\n    const sectionIndex = Math.min(\n      Math.floor(distance * sectionList.length), \n      sectionList.length - 1\n    );\n    const section = sectionList[sectionIndex];\n    \n    // Row increases as y moves away from 0 (either positive or negative)\n    const row = Math.floor(Math.abs(seat.coordinates.y) * 10) + 1;\n    \n    // Seat number increases as x moves away from 0 (either positive or negative)\n    const number = Math.floor(Math.abs(seat.coordinates.x) * 10) + 1;\n    \n    // Create a more meaningful ID\n    const id = `${section}${row}-${number}`;\n    \n    return {\n      id,\n      section,\n      row,\n      number,\n      price,\n      coordinates: seat.coordinates,\n      // Store original index for reference\n      originalIndex: index\n    };\n  });\n};\n\nexport default {\n  loadSeatsFromFile\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}